{
	"info": {
		"_postman_id": "fab5004f-c0cc-4458-a459-f8679f344ae6",
		"name": "Transaction Processing API",
		"description": "Complete API collection for the Transaction Processing System including authentication, transaction management, and batch processing endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14760108"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.accessToken).to.not.be.undefined;",
									"    pm.environment.set(\"token\", jsonData.accessToken);",
									"    pm.environment.set(\"authHeader\", \"Bearer \" + jsonData.accessToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and get JWT token. Sets the token in environment variables for subsequent requests."
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction Management",
			"item": [
				{
					"name": "Get All Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('content');",
									"    pm.expect(jsonData).to.have.property('pageable');",
									"    pm.expect(jsonData).to.have.property('totalElements');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/transactions?page=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"description": "Page number (zero-indexed)"
								},
								{
									"key": "size",
									"value": "10",
									"description": "Page size"
								}
							]
						},
						"description": "Retrieve all transactions with pagination"
					},
					"response": []
				},
				{
					"name": "Get Transaction by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transaction has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('accountNumber');",
									"    pm.expect(jsonData).to.have.property('trxAmount');",
									"    pm.expect(jsonData).to.have.property('description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/transactions/{{transactionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions",
								"{{transactionId}}"
							]
						},
						"description": "Get a specific transaction by ID. Set {{transactionId}} variable in environment."
					},
					"response": []
				},
				{
					"name": "Get Transactions by Account Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All transactions belong to same account\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.content && jsonData.content.length > 0) {",
									"        jsonData.content.forEach(function(transaction) {",
									"            pm.expect(transaction.accountNumber).to.eql(pm.variables.get('accountNumber'));",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/transactions/account/{{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions",
								"account",
								"{{accountNumber}}"
							]
						},
						"description": "Get transactions for a specific account number"
					},
					"response": []
				},
				{
					"name": "Get Transactions by Customer ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All transactions belong to same customer\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.content && jsonData.content.length > 0) {",
									"        jsonData.content.forEach(function(transaction) {",
									"            pm.expect(transaction.customerId).to.eql(pm.variables.get('customerId'));",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/transactions/customer/{{customerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions",
								"customer",
								"{{customerId}}"
							]
						},
						"description": "Get transactions for a specific customer ID"
					},
					"response": []
				},
				{
					"name": "Search Transactions by Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All transactions contain search term\", function () {",
									"    var jsonData = pm.response.json();",
									"    var searchTerm = pm.request.url.query.get('description');",
									"    if (jsonData.content && jsonData.content.length > 0) {",
									"        jsonData.content.forEach(function(transaction) {",
									"            pm.expect(transaction.description.toLowerCase()).to.include(searchTerm.toLowerCase());",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/transactions/search?description=FUND",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions",
								"search"
							],
							"query": [
								{
									"key": "description",
									"value": "FUND",
									"description": "Search term for transaction description"
								}
							]
						},
						"description": "Search transactions by description (case-insensitive)"
					},
					"response": []
				},
				{
					"name": "Create Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Transaction is created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.accountNumber).to.eql(pm.variables.get('newAccountNumber'));",
									"    pm.environment.set(\"createdTransactionId\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountNumber\": \"{{newAccountNumber}}\",\n  \"trxAmount\": 1000.00,\n  \"description\": \"TEST TRANSACTION\",\n  \"trxDate\": \"2024-01-01\",\n  \"trxTime\": \"12:00:00\",\n  \"customerId\": \"999\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions"
							]
						},
						"description": "Create a new transaction"
					},
					"response": []
				},
				{
					"name": "Update Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Transaction is updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.trxAmount).to.eql(1500.00);",
									"    pm.expect(jsonData.description).to.eql(\"UPDATED TRANSACTION\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountNumber\": \"8872838283\",\n  \"trxAmount\": 1500.00,\n  \"description\": \"UPDATED TRANSACTION\",\n  \"trxDate\": \"2019-09-12\",\n  \"trxTime\": \"11:11:11\",\n  \"customerId\": \"222\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/transactions/{{transactionId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"transactions",
								"{{transactionId}}"
							]
						},
						"description": "Update an existing transaction"
					},
					"response": []
				}
			]
		},
		{
			"name": "Batch Processing",
			"item": [
				{
					"name": "Import Transactions from File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Batch job initiated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"    pm.expect(jsonData.message).to.include(\"Batch job has been initiated\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/batch/import?file={{filePath}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"batch",
								"import"
							],
							"query": [
								{
									"key": "file",
									"value": "{{filePath}}",
									"description": "Path to the transaction file to import"
								}
							]
						},
						"description": "Import transactions from a pipe-delimited file. Set {{filePath}} in environment variables."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "accountNumber",
			"value": "8872838283",
			"type": "string"
		},
		{
			"key": "customerId",
			"value": "222",
			"type": "string"
		},
		{
			"key": "newAccountNumber",
			"value": "9999999999",
			"type": "string"
		},
		{
			"key": "transactionId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "filePath",
			"value": "",
			"type": "string"
		}
	]
}